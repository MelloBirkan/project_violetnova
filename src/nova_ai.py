import pygame
import random

class NovaAI:
    WIDTH = 80
    HEIGHT = 80
    
    # Express√µes que a IA pode mostrar
    EXPRESSIONS = {
        "normal": "üòä",
        "excited": "üòÉ",
        "curious": "ü§î",
        "surprised": "üò≤",
        "warning": "‚ö†Ô∏è",
        "happy": "üòÑ",
        "alert": "üö®"
    }
    
    # Fatos cient√≠ficos sobre planetas
    FACTS = {
        "Earth": [
            "A atmosfera da Terra nos protege da radia√ß√£o solar.",
            "71% da Terra √© coberta por √°gua.",
            "O campo magn√©tico da Terra nos protege dos ventos solares.",
            "A Terra √© o √∫nico planeta n√£o nomeado em homenagem a um deus.",
            "A rota√ß√£o da Terra est√° gradualmente ficando mais lenta."
        ],
        "Moon": [
            "A Lua est√° se afastando lentamente da Terra a 3,8 cm por ano.",
            "A Lua n√£o tem atmosfera ou clima.",
            "Um dia na Lua dura cerca de 29,5 dias terrestres.",
            "A gravidade da Lua √© 1/6 da gravidade da Terra.",
            "A superf√≠cie da Lua √© coberta por regolito, um p√≥ fino."
        ],
        "Mercury": [
            "Merc√∫rio n√£o tem atmosfera e tem varia√ß√µes extremas de temperatura.",
            "Merc√∫rio √© o menor planeta do nosso sistema solar.",
            "Um dia em Merc√∫rio tem 59 dias terrestres.",
            "Merc√∫rio tem alto teor de ferro e um grande n√∫cleo.",
            "Merc√∫rio n√£o tem luas pr√≥prias."
        ],
        "Venus": [
            "V√™nus gira no sentido contr√°rio em compara√ß√£o com outros planetas.",
            "V√™nus tem o dia mais longo de qualquer planeta, com 243 dias terrestres.",
            "V√™nus √© o planeta mais quente devido √† sua atmosfera espessa.",
            "V√™nus n√£o tem luas nem campo magn√©tico.",
            "A atmosfera de V√™nus √© 96% di√≥xido de carbono."
        ],
        "Mars": [
            "Marte tem o maior vulc√£o do sistema solar: Olympus Mons.",
            "Marte tem duas pequenas luas: Phobos e Deimos.",
            "Marte tem esta√ß√µes semelhantes √† Terra, mas duas vezes mais longas.",
            "Marte tem calotas polares feitas de gelo de √°gua e di√≥xido de carbono.",
            "A cor vermelha de Marte vem do √≥xido de ferro (ferrugem) em sua superf√≠cie."
        ],
        "Jupiter": [
            "J√∫piter tem o campo magn√©tico mais forte de qualquer planeta.",
            "J√∫piter tem pelo menos 79 luas, incluindo as quatro grandes luas galileanas.",
            "A Grande Mancha Vermelha de J√∫piter √© uma tempestade que dura h√° s√©culos.",
            "J√∫piter √© um gigante gasoso sem superf√≠cie s√≥lida.",
            "J√∫piter tem an√©is t√™nues, quase invis√≠veis."
        ],
        "Saturn": [
            "Os an√©is de Saturno s√£o feitos principalmente de part√≠culas de gelo e detritos rochosos.",
            "Saturno tem a menor densidade de todos os planetas e flutuaria na √°gua.",
            "Saturno tem pelo menos 82 luas.",
            "A lua de Saturno, Tit√£, tem uma atmosfera espessa.",
            "Os an√©is de Saturno t√™m at√© 175.000 milhas de largura, mas s√£o apenas 10 metros de espessura."
        ],
        "Uranus": [
            "Urano gira de lado, com seu eixo inclinado em 98 graus.",
            "Urano tem 27 luas conhecidas, nomeadas ap√≥s personagens liter√°rios.",
            "Urano aparece azul-esverdeado devido ao metano em sua atmosfera.",
            "Urano √© um gigante de gelo composto principalmente de gelos de √°gua, metano e am√¥nia.",
            "Urano tem 13 an√©is estreitos."
        ],
        "Neptune": [
            "Netuno tem os ventos mais fortes do sistema solar, atingindo 2.100 km/h.",
            "Netuno tem 14 luas conhecidas, incluindo Trit√£o que orbita para tr√°s.",
            "A cor azul de Netuno vem do metano em sua atmosfera.",
            "Netuno tem uma Grande Mancha Escura, semelhante √† Grande Mancha Vermelha de J√∫piter.",
            "A dist√¢ncia de Netuno ao Sol muda devido √† sua √≥rbita el√≠ptica."
        ],
        "Pluto": [
            "Plut√£o foi reclassificado de planeta para planeta an√£o em 2006.",
            "Plut√£o tem cinco luas conhecidas, sendo Caronte a maior.",
            "A regi√£o em forma de cora√ß√£o em Plut√£o √© chamada Regi√£o Tombaugh.",
            "A atmosfera de Plut√£o expande e contrai √† medida que se aproxima e se afasta do Sol.",
            "Plut√£o leva 248 anos terrestres para orbitar o Sol uma vez."
        ]
    }
    
    def __init__(self, screen_width, screen_height):
        self.screen_width = screen_width
        self.screen_height = screen_height
        self.x = screen_width - self.WIDTH - 10
        self.y = 10
        self.expression = "normal"
        self.message = ""
        self.message_timer = 0
        self.message_duration = 180  # Quadros (3 segundos a 60fps)
        
        # Cria a superf√≠cie do assistente AI
        self.update_surface()
    
    def update_surface(self):
        """Atualiza a superf√≠cie do assistente AI com a express√£o atual"""
        self.surface = pygame.Surface((self.WIDTH, self.HEIGHT), pygame.SRCALPHA)
        self.surface.fill((0, 0, 0, 0))  # Transparente
        
        # Desenha fundo circular
        pygame.draw.circle(self.surface, (50, 50, 50, 200), 
                          (self.WIDTH // 2, self.HEIGHT // 2), self.WIDTH // 2)
        pygame.draw.circle(self.surface, (70, 130, 180, 230), 
                          (self.WIDTH // 2, self.HEIGHT // 2), self.WIDTH // 2 - 3)
        
        # Usaremos uma fonte para exibir a express√£o emoji
        # Esta √© uma abordagem simplificada - para um jogo real, voc√™ usaria suporte adequado a emojis
        font = pygame.font.Font(None, 50)  # Fonte grande para a express√£o
        expression_text = font.render(self.EXPRESSIONS[self.expression], True, (255, 255, 255))
        expression_rect = expression_text.get_rect(center=(self.WIDTH // 2, self.HEIGHT // 2))
        
        self.surface.blit(expression_text, expression_rect)
    
    def set_expression(self, expression):
        """Muda a express√£o da IA"""
        if expression in self.EXPRESSIONS:
            self.expression = expression
            self.update_surface()
    
    def show_message(self, message, expression="normal"):
        """Exibe uma mensagem da IA"""
        self.message = message
        self.set_expression(expression)
        self.message_timer = self.message_duration
    
    def alert_gravity_change(self, planet_name, gravity_factor):
        """Alerta o jogador sobre a mudan√ßa de gravidade em um novo planeta"""
        # Converte porcentagem para valor g (ex: 100% -> g = 1.0)
        g_value = gravity_factor / 100.0
        self.show_message(f"Gravidade em {planet_name}: {gravity_factor}% da Terra (g = {g_value})", "alert")
    
    def give_random_fact(self, planet_name):
        """Compartilha um fato cient√≠fico aleat√≥rio sobre o planeta atual"""
        if planet_name in self.FACTS:
            fact = random.choice(self.FACTS[planet_name])
            self.show_message(fact, "curious")
    
    def react_to_discovery(self, collectible_type):
        """Reage ao jogador coletando um item"""
        if collectible_type == "data":
            self.show_message("Dados cient√≠ficos coletados!", "excited")
        elif collectible_type == "fuel":
            self.show_message("C√©lulas de combust√≠vel adquiridas!", "happy")
        elif collectible_type == "weapon":
            self.show_message("Sistemas defensivos online!", "alert")
    
    def react_to_obstacle(self, obstacle_type):
        """Reage a um obst√°culo se aproximando"""
        if obstacle_type == "asteroid":
            self.show_message("Campo de asteroides √† frente!", "warning")
        elif obstacle_type == "debris":
            self.show_message("Detritos espaciais detectados!", "warning")
        elif obstacle_type == "storm":
            self.show_message("Tempestade solar se aproximando!", "warning")
    
    def update(self):
        """Atualiza o assistente AI"""
        # Atualiza temporizador da mensagem
        if self.message_timer > 0:
            self.message_timer -= 1
            
            # Reinicia para express√£o normal quando a mensagem expira
            if self.message_timer == 0:
                self.message = ""
                self.set_expression("normal")
    
    def draw(self, screen):
        """Desenha o assistente AI e quaisquer mensagens ativas"""
        # Desenha o c√≠rculo da IA
        screen.blit(self.surface, (self.x, self.y))
        
        # Desenha qualquer mensagem ativa
        if self.message and self.message_timer > 0:
            # Prepara a superf√≠cie do texto da mensagem
            font = pygame.font.Font(None, 24)
            message_surf = font.render(self.message, True, (255, 255, 255))
            
            # Posiciona a mensagem no centro superior da tela
            message_rect = message_surf.get_rect(midtop=(self.screen_width // 2, 10))
            
            # Desenha um fundo para a mensagem
            backdrop_rect = message_rect.inflate(20, 10)
            pygame.draw.rect(screen, (0, 0, 0, 180), backdrop_rect, border_radius=5)
            
            # Desenha o texto da mensagem
            screen.blit(message_surf, message_rect)